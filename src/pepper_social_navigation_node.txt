#include "ros/ros.h"
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>

#include <cstdlib>
#include <Eigen/Dense>

#include "agentManagement/Agent.h"


using namespace Eigen;
typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

int main(int argc, char **argv)
{
  ros::init(argc, argv, "pepper_social_navigation_node");
  if (argc != 3)
    {
      ROS_INFO("usage: pepper_social_navigation_node X Y");
      return 1;
    }
  //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("move_base", true);

  //wait for the action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
    ROS_INFO("Waiting for the move_base action server to come up");
  }

  move_base_msgs::MoveBaseGoal goal;

  //we'll send a goal to the robot to move 1 meter forward
  goal.target_pose.header.frame_id = "base_footprint";
  goal.target_pose.header.stamp = ros::Time::now();

  goal.target_pose.pose.position.x = atoll(argv[1]);
  goal.target_pose.pose.position.y = atoll(argv[2]);
  goal.target_pose.pose.orientation.w = 1.0;

  ROS_INFO("Sending goal");
  ac.sendGoal(goal);

  ac.waitForResult();

  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
    ROS_INFO("Hooray, the base moved for (%f,%f) meters", goal.target_pose.pose.position.x, goal.target_pose.pose.position.y);
  else
    ROS_INFO("The base failed to move for some reason");

  // if (argc != 3)
  // {
  //   ROS_INFO("usage: add_two_ints_client X Y");
  //   return 1;
  // }

  // ros::NodeHandle n;
  // ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>("add_two_ints");
  // beginner_tutorials::AddTwoInts srv;
  // srv.request.a = atoll(argv[1]);
  // srv.request.b = atoll(argv[2]);
  // if (client.call(srv))
  // {
  //   ROS_INFO("Sum: %ld", (long int)srv.response.sum);
  // }
  // else
  // {
  //   ROS_ERROR("Failed to call service add_two_ints");
  //   return 1;
  // }

  ROS_INFO("Hello world!");

  Agent * a = new Agent(Vector3d(1,2,0));

  ROS_INFO("Succesfully created an Agent at (%f,%f)", a->getX(), a->getY());

  return 0;
}
